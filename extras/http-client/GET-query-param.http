// https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html
// https://www.jetbrains.com/help/idea/http-response-handling-examples.html#checking-response-headers-body

### Suche mit vorhandenem Nachnamen
GET {{baseUrl}}?nachname=Alpha
Accept: application/hal+json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit vorhandenem Nachnamen: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit vorhandenem Nachnamen: application/hal+json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/hal+json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('GET mit vorhandenem Nachnamen: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        // TODO Optional Chaining
        const vereine = body._embedded.vereine;
        client.assert(Array.isArray(vereine), `body: ${JSON.stringify(body)}`);
        client.assert(vereine.length > 0, `vereine: ${JSON.stringify(vereine)}`);
        vereine.map(verein => verein.nachname)
            .forEach(nachname => client.assert(nachname.includes('Alpha'), `vereine: ${JSON.stringify(vereine)}`));
    });
%}

### Suche mit nicht-vorhandenem Nachnamen
GET {{baseUrl}}?nachname=Nichtvorhanden
Accept: application/hal+json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit nicht-vorhandenem Nachnamen: Not Found', () => {
        const status = response.status;
        client.assert(status === 404, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit nicht-vorhandenem Nachnamen: leerer Body', () => {
        const body = response.body;
        client.assert(body === null, `body: ${JSON.stringify(body)}`);
    });
%}

### Suche mit vorhandener Email (mit URL Encoding)
GET {{baseUrl}}?email=admin%40acme.com
Accept: application/hal+json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit vorhandener Email: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit vorhandener Email: application/hal+json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/hal+json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('GET mit vorhandener Email: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        const vereine = body._embedded.vereine;
        client.assert(Array.isArray(vereine), `body: ${JSON.stringify(body)}`);
        client.assert(vereine.length === 1);
        const verein = vereine[0];
        client.assert(verein.email === 'admin@acme.com', `body: ${JSON.stringify(body)}`);
    });
%}

### Suche mit nicht-vorhandener Email
GET {{baseUrl}}?email=nicht%40vorhanden.com
Accept: application/hal+json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit nicht-vorhandener Email: Not Found', () => {
        const status = response.status;
        client.assert(status === 404, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit nicht-vorhandener Email: leerer Body', () => {
        const body = response.body;
        client.assert(body === null, `body: ${JSON.stringify(body)}`);
    });
%}

### Suche Nachnamen mit Praefix
GET {{baseUrl}}/nachname/A
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('Suche Nachnamen mit Praefix und admin: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Suche Nachnamen mit Praefix und admin: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Suche Nachnamen mit Praefix und admin: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'string', `Falscher body: ${typeof body}`);
        const nachnamen = body.slice(1, body.length - 2).split(', ');
        client.assert(Array.isArray(nachnamen), `body: ${JSON.stringify(body)}`);
        client.assert(nachnamen.length > 0, `nachnamen: ${JSON.stringify(nachnamen)}`);
        nachnamen.forEach(nachname => nachname.startsWith('A'), `body: ${body}`);
    });
%}
