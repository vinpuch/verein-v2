# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Description in Markdown-Syntax

schema {
  query: Query
  mutation: Mutation
}

"Suche nach Vereindaten"
type Query {
  "Suche Vereindaten anhand der ID"
  verein(id: ID!): Verein

  "Suche Vereindaten anhand des Nachnamens oder der Emailadresse"
  vereine(input: Suchkriterien): [Verein!]
}

type Mutation {
  "Einen neuen Vereindatensatz anlegen"
  create(input: VereinInput!): CreatePayload
}

# https://spec.graphql.org/draft/#sec-Types
"Eigenschaften eines Verein-Datensatzes mit untergeordneten Eigenschaften"
type Verein {
  "ID des Vereine"
  id: ID
  "Nachname des Vereine"
  nachname: String!
  # https://www.graphql-scalars.dev/docs/scalars/email-address
  email: String!
  kategorie: Int!
  hasNewsletter: Boolean!
  # https://www.graphql-scalars.dev/docs/scalars/local-date
  geburtsdatum: String
  homepage: String
  geschlecht: String
  familienstand: String
  interessen: [String!]
  umsatz: Umsatz
  adresse: Adresse!
}

type Umsatz {
  "Der Betrag"
  betrag: String!
  # https://www.graphql-scalars.dev/docs/scalars/currency
  "Die Währung"
  waehrung: String!
}

type Adresse {
  "Postleitzahl der Adresse"
  plz: String!
  "Ortsangabe"
  ort: String!
}

# https://spec.graphql.org/draft/#sec-Input-Objects
"Suchkriterien für die Query 'vereine'"
input Suchkriterien {
  "Nachname der gesuchten Vereine"
  nachname: String
  "Emailadresse der gesuchten Vereine"
  email: String
}

"Eingabedaten für einen neuen Vereine"
input VereinInput {
  "Nachname des neuen Vereine"
  nachname: String!
  "Emailadresse des neuen Vereine"
  email: String!
  kategorie: Int!
  "Newsletter-Abo: true / false"
  hasNewsletter: Boolean!
  "Geburtsdatum des neuen Vereine"
  geburtsdatum: String
  homepage: String
  "Geschlecht des neuen Vereine: MAENNLICH, WEIBLICH, DIVERS"
  geschlecht: Geschlecht
  "Familienstand des neuen Vereine: LEDIG, VERHEIRATET, GESCHIEDEN, VERWITWET"
  familienstand: Familienstand
  "InteressEN des neuen Vereine: SPORT, LESEN, REISEN"
  interessen: [Interesse!]
  "Umsatzangabe zum neuen Vereine"
  umsatz: UmsatzInput
  "Adresse des neuen Vereine"
  adresse: AdresseInput!
}

"Aufzählungstyp für das Geschlecht eines Vereine"
enum Geschlecht {
  WEIBLICH
  MAENNLICH
  DIVERS
}

"Aufzählungstyp für den Familienstand eines Vereine"
enum Familienstand {
  LEDIG
  VERHEIRATET
  GESCHIEDEN
  VERWITWET
}

"Aufzählungstyp für die Interessen eines Vereine"
enum Interesse {
  SPORT
  LESEN
  REISEN
}

"Umsatzeingabe für einen Vereine: Neuanlegen oder Ändern"
input UmsatzInput {
  "Betrag"
  betrag: String!
  "Währung"
  waehrung: String!
}

"Neue oder geänderte Adresse"
input AdresseInput {
  plz: String!
  ort: String!
}

"Rückgabetyp beim Neuanlegen eines Vereine"
type CreatePayload {
  "ID des neu angelegten Vereine"
  id: String!
}
